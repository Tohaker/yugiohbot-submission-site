// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Submission Form When the submit button is pressed When an error is returned should show an error message 1`] = `
<SubmissionForm>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "lastClassName": "jyvpmt",
            "rules": Array [
              "
  background-color: #282c34;
  min-height: 100vh;
  padding: 0 1vmin;
  font-size: calc(10px + 2vmin);
  text-align: left;
  color: white;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="sc-bdVaJa jyvpmt"
      >
        <styled.p>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bxivhb",
                  "isStatic": false,
                  "lastClassName": "gZxFzu",
                  "rules": Array [
                    "
  font-weight: bold;
  font-size: calc(10px + 3vmin);
  margin: 0;
",
                  ],
                },
                "displayName": "styled.p",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bxivhb",
                "target": "p",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <p
              className="sc-bxivhb gZxFzu"
            >
              YuGiOh Bot 3000 Submissions
            </p>
          </StyledComponent>
        </styled.p>
        <styled.p>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-ifAKCX",
                  "isStatic": false,
                  "lastClassName": "eUzXhR",
                  "rules": Array [
                    "
  font-weight: italic;
  font-size: calc(10px + 1vmin);
  margin: 0;
",
                  ],
                },
                "displayName": "styled.p",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-ifAKCX",
                "target": "p",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <p
              className="sc-ifAKCX eUzXhR"
            >
              Images must be under 10MB in size.
            </p>
          </StyledComponent>
        </styled.p>
        <styled.p>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-ifAKCX",
                  "isStatic": false,
                  "lastClassName": "eUzXhR",
                  "rules": Array [
                    "
  font-weight: italic;
  font-size: calc(10px + 1vmin);
  margin: 0;
",
                  ],
                },
                "displayName": "styled.p",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-ifAKCX",
                "target": "p",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <p
              className="sc-ifAKCX eUzXhR"
            >
              They will look best with a 512px x 512px resolution. Please submit your image once only.
            </p>
          </StyledComponent>
        </styled.p>
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htpNat",
                  "isStatic": false,
                  "lastClassName": "cOBxIe",
                  "rules": Array [
                    "
  margin-top: 1vmin;
  display: flex;
  flex-direction: column;
  float: left;
  padding: 0 1vmin;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htpNat",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="sc-htpNat cOBxIe"
            >
              <label>
                Image Preview: 
              </label>
              <img
                alt="Preview"
                src="bewd.jpg"
              />
            </div>
          </StyledComponent>
        </styled.div>
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bwzfXH",
                  "isStatic": false,
                  "lastClassName": "hkihGj",
                  "rules": Array [
                    "
  margin-top: 1vmin;
  display: flex;
  flex-direction: column;
  float: left;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bwzfXH",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="sc-bwzfXH hkihGj"
            >
              <label>
                Card Image:
              </label>
              <styled.input
                name="image"
                onChange={[Function]}
                type="file"
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-EHOje",
                        "isStatic": false,
                        "lastClassName": "eymgeN",
                        "rules": Array [
                          "
  height: calc(10px + 3vmin);
  font-size: calc(10px + 2vmin);
  margin: 1vmin 0 3vmin 0;

  input {
    background-color: white;
  }
",
                        ],
                      },
                      "displayName": "styled.input",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-EHOje",
                      "target": "input",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  name="image"
                  onChange={[Function]}
                  type="file"
                >
                  <input
                    className="sc-EHOje eymgeN"
                    name="image"
                    onChange={[Function]}
                    type="file"
                  />
                </StyledComponent>
              </styled.input>
              <styled.button
                disabled={false}
                id="submit"
                onClick={[Function]}
              >
                <StyledComponent
                  disabled={false}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-bZQynM",
                        "isStatic": false,
                        "lastClassName": "NKiVp",
                        "rules": Array [
                          "
  font-size: calc(10px + 2vmin);
  background-color: white;
  border-radius: 50px;
",
                        ],
                      },
                      "displayName": "styled.button",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-bZQynM",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  id="submit"
                  onClick={[Function]}
                >
                  <button
                    className="sc-bZQynM NKiVp"
                    disabled={false}
                    id="submit"
                    onClick={[Function]}
                  >
                    Submit
                  </button>
                </StyledComponent>
              </styled.button>
              <label />
            </div>
          </StyledComponent>
        </styled.div>
      </div>
    </StyledComponent>
  </styled.div>
</SubmissionForm>
`;

exports[`Submission Form should render correctly 1`] = `
<SubmissionForm>
  <styled.div>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "lastClassName": "jyvpmt",
            "rules": Array [
              "
  background-color: #282c34;
  min-height: 100vh;
  padding: 0 1vmin;
  font-size: calc(10px + 2vmin);
  text-align: left;
  color: white;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="sc-bdVaJa jyvpmt"
      >
        <styled.p>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bxivhb",
                  "isStatic": false,
                  "lastClassName": "gZxFzu",
                  "rules": Array [
                    "
  font-weight: bold;
  font-size: calc(10px + 3vmin);
  margin: 0;
",
                  ],
                },
                "displayName": "styled.p",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bxivhb",
                "target": "p",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <p
              className="sc-bxivhb gZxFzu"
            >
              YuGiOh Bot 3000 Submissions
            </p>
          </StyledComponent>
        </styled.p>
        <styled.p>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-ifAKCX",
                  "isStatic": false,
                  "lastClassName": "eUzXhR",
                  "rules": Array [
                    "
  font-weight: italic;
  font-size: calc(10px + 1vmin);
  margin: 0;
",
                  ],
                },
                "displayName": "styled.p",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-ifAKCX",
                "target": "p",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <p
              className="sc-ifAKCX eUzXhR"
            >
              Images must be under 10MB in size.
            </p>
          </StyledComponent>
        </styled.p>
        <styled.p>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-ifAKCX",
                  "isStatic": false,
                  "lastClassName": "eUzXhR",
                  "rules": Array [
                    "
  font-weight: italic;
  font-size: calc(10px + 1vmin);
  margin: 0;
",
                  ],
                },
                "displayName": "styled.p",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-ifAKCX",
                "target": "p",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <p
              className="sc-ifAKCX eUzXhR"
            >
              They will look best with a 512px x 512px resolution. Please submit your image once only.
            </p>
          </StyledComponent>
        </styled.p>
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htpNat",
                  "isStatic": false,
                  "lastClassName": "cOBxIe",
                  "rules": Array [
                    "
  margin-top: 1vmin;
  display: flex;
  flex-direction: column;
  float: left;
  padding: 0 1vmin;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htpNat",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="sc-htpNat cOBxIe"
            >
              <label>
                Image Preview: 
              </label>
              <img
                alt="Preview"
                src="bewd.jpg"
              />
            </div>
          </StyledComponent>
        </styled.div>
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bwzfXH",
                  "isStatic": false,
                  "lastClassName": "hkihGj",
                  "rules": Array [
                    "
  margin-top: 1vmin;
  display: flex;
  flex-direction: column;
  float: left;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bwzfXH",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="sc-bwzfXH hkihGj"
            >
              <label>
                Card Image:
              </label>
              <styled.input
                name="image"
                onChange={[Function]}
                type="file"
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-EHOje",
                        "isStatic": false,
                        "lastClassName": "eymgeN",
                        "rules": Array [
                          "
  height: calc(10px + 3vmin);
  font-size: calc(10px + 2vmin);
  margin: 1vmin 0 3vmin 0;

  input {
    background-color: white;
  }
",
                        ],
                      },
                      "displayName": "styled.input",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-EHOje",
                      "target": "input",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  name="image"
                  onChange={[Function]}
                  type="file"
                >
                  <input
                    className="sc-EHOje eymgeN"
                    name="image"
                    onChange={[Function]}
                    type="file"
                  />
                </StyledComponent>
              </styled.input>
              <styled.button
                disabled={false}
                id="submit"
                onClick={[Function]}
              >
                <StyledComponent
                  disabled={false}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-bZQynM",
                        "isStatic": false,
                        "lastClassName": "NKiVp",
                        "rules": Array [
                          "
  font-size: calc(10px + 2vmin);
  background-color: white;
  border-radius: 50px;
",
                        ],
                      },
                      "displayName": "styled.button",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-bZQynM",
                      "target": "button",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  id="submit"
                  onClick={[Function]}
                >
                  <button
                    className="sc-bZQynM NKiVp"
                    disabled={false}
                    id="submit"
                    onClick={[Function]}
                  >
                    Submit
                  </button>
                </StyledComponent>
              </styled.button>
              <label />
            </div>
          </StyledComponent>
        </styled.div>
      </div>
    </StyledComponent>
  </styled.div>
</SubmissionForm>
`;
